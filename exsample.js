/* ◆引数 */
const 定数名 = (第1引数, 第2引数, ...) => {
	// 処理
}
/* 関数の呼び出し */
定数名();

/* ◆オブジェクト */
	const 定数名 = 関数()
	↓
	const 定数名 = () =>     /* ←アロー関数 */

const 定数名 = {
	プロパティ名: () => {
		処理
	}
};
/* 関数の呼び出し */
定数名.プロパティ名();

/* ◆オブジェクト */
const 定数名 = {オブジェクト};
オブジェクト→{プロパティ:値, プロパティ:値};
console.log{定数名.プロパティ名}

/* コンストラクタ */
class クラス名{
	constructor(){
	クラスの中に追加	
	}
}

class クラス名{
	constructor() {
		this.プロパティ名 = 値;
	}
}
const クラス名 = new 定数();
console.log(constructorで設定した値);

/* メソッド */
class クラス名{
	constructor(){

	}
	メソッド名(){
		行いたい処理
	}
}

const インスタンス = new 定数(引数1, 引数2);
インスタンス.メソッド()

/* this */
/* メソッド内でインスンタスの値を使用する */
/* this.プロパティ名() */

/* 継承 extends*/
/* class 子クラス extends 親クラス {} */

/* 戻り値　return */

/* コンストラクタのオーバーライド super() */
/* 親クラスのコンストラクタが引数を受け取る場合には、「super」の後ろの丸括弧「( )」に引数を渡す */
/* super(引数) */